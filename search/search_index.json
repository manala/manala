{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"Manala <p>Let your project's plumbing up to date.</p> <p></p> <p> Get started </p> <p> Contribute </p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#build","title":"Build","text":"<p>Requirements</p> <ul> <li>Go 1.14+</li> </ul> <p>Update modules</p> <pre><code>go get -u ./...\ngo mod tidy\n</code></pre>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>With Docker:</p> <pre><code>make run\n</code></pre>"},{"location":"installation/","title":"Installation","text":"<p>Homebrew</p> <pre><code>brew install manala/tap/manala\n</code></pre> <p>Debian / Ubuntu</p> <p>as root:</p> <pre><code>mkdir -p 755 /etc/apt/keyrings\ncurl -sSL https://raw.githubusercontent.com/manala/packages/main/manala.gpg -o /etc/apt/keyrings/manala.gpg\necho \"deb [signed-by=/etc/apt/keyrings/manala.gpg] https://manala.github.io/packages/apt/ stable main\" &gt; /etc/apt/sources.list.d/manala.list\napt update\napt install manala\n</code></pre> <p>as user with sudo privileges:</p> <pre><code>sudo mkdir -p 755 /etc/apt/keyrings\nsudo curl -sSL https://raw.githubusercontent.com/manala/packages/main/manala.gpg -o /etc/apt/keyrings/manala.gpg\necho \"deb [signed-by=/etc/apt/keyrings/manala.gpg] https://manala.github.io/packages/apt/ stable main\" | sudo tee /etc/apt/sources.list.d/manala.list\nsudo apt update\nsudo apt install manala\n</code></pre> <p>Arch Linux / Manjaro</p> <p>as root:</p> <pre><code>curl -sSL https://raw.githubusercontent.com/manala/packages/main/manala.gpg | pacman-key --add -\npacman-key --lsign-key 1394DEA3\necho -e \"\\n[manala]\\nServer = https://manala.github.io/packages/aur/stable/\\$arch\" &gt;&gt; /etc/pacman.conf\npacman -Sy manala\n</code></pre> <p>as user with sudo privileges:</p> <pre><code>curl -sSL https://raw.githubusercontent.com/manala/packages/main/manala.gpg | sudo pacman-key --add -\nsudo pacman-key --lsign-key 1394DEA3\necho -e \"\\n[manala]\\nServer = https://manala.github.io/packages/aur/stable/\\$arch\" | sudo tee -a /etc/apt/sources.list.d/manala.list\nsudo pacman -Sy manala\n</code></pre> <p>deb / rpm</p> <p>Download the <code>.deb</code> or <code>.rpm</code> from the releases page and install with <code>dpkg -i</code> and <code>rpm -i</code> respectively.</p> <p>Shell script</p> <p>as root:</p> <pre><code>curl -sfL https://raw.githubusercontent.com/manala/manala/main/godownloader.sh | sh -s -- -b /usr/local/bin\n</code></pre> <p>as user with sudo privileges:</p> <pre><code>curl -sfL https://raw.githubusercontent.com/manala/manala/main/godownloader.sh | sudo sh -s -- -b /usr/local/bin\n</code></pre>"},{"location":"overview/","title":"Overview","text":""},{"location":"overview/#a-basic-example-in-order-to-get-the-big-picture","title":"A basic example in order to get the big picture","text":"<p>Roughly said, <code>manala</code> allows you to embed distributed templates in your projects and ease the synchronization of your projects when the reference templates are updated.</p> <p>In this usage example, we are going to implement a very basic feature, yet rich enough to measure the benefits of <code>manala</code> and to fully understand the basic concepts behind it.</p>"},{"location":"overview/#the-scenario-of-our-example","title":"The scenario of our example","text":"<p>All your company's projects use <code>PHP-CS-fixer</code> in order to define your coding rules and apply them.</p> <p>Your company would like to always apply the same coding rules on all of its projects, but maintaining the same set of rules in every project can be tedious and error-prone. In an idealistic world, the coding rules should be maintained in one place and passed on to all your projects as seamlessly as possible.</p> <p>That's where manala enters the game ...</p>"},{"location":"overview/#some-wording-project-vs-recipe-vs-repository","title":"Some wording: <code>project</code> vs <code>recipe</code> vs <code>repository</code>","text":"<p>In manala's vocabulary, your projects (the company's PHP projects in our example) are called ... <code>projects</code>.</p> <p>In our example, our reference coding rules will be stored in a single place where they will be maintained. A <code>recipe</code> is a set of templates (the file containing your coding rules is one of these templates). All the recipes and templates you maintain are made accessible to your colleagues through a <code>repository</code>.</p>"},{"location":"overview/#first-step-install-manala","title":"First step: install manala","text":"<p>See installation documentation</p> <p>Tip</p> <p>Run <code>manala</code> in a console/terminal to obtain a list of available commands.</p>"},{"location":"overview/#create-your-recipe-repository-and-your-first-template","title":"Create your recipe repository and your first template","text":"<p>Tip</p> <p>manala ships with some recipes by default. Run <code>manala list</code> to get the list of available recipes.</p> <p>But in this example, we are going to create our own recipe repository to better understand how manala works under the hood and enable you to develop your own recipes and templates when the need arises.</p> <p>Run the following command to create your recipe repository: </p> <p><code>mkdir ~/my-manala-recipe-repository</code></p> <p>Within this repository, we are going to create a set of templates that will host our PHP rule template:</p> <p><code>mkdir mkdir ~/my-manala-recipe-repository/my-php-templates</code></p> <p>Note</p> <p>In manala's philosophy, a repository is viewed as a company-wide repository where you can store recipes and templates for various purposes and many profiles: devops, hosting, backend developers, frontend developers, etc. In fact, your projects will not embed all the company's recipes but just the subset of recipes that are useful for your project. In our example, we are going to embed only the templates under <code>my-php-templates</code> in our PHP projects.</p> <p>Let's create a <code>.manala.yaml</code> file under the <code>my-php-templates</code>:</p> <pre><code>  cd ~/my-manala-recipe-repository/my-php-templates\n  touch ./.manala.yaml\n</code></pre> <p>Note</p> <p>the <code>.manala.yaml</code> file acts as a manifest for your recipe. It holds its description, and indicates which files or folders must be put under synchronization.</p> <p>Now edit this file and put the following content:</p> <pre><code>manala:\ndescription: My company's PHP recipe\nsync:\n- .manala\n</code></pre> <p>Now we are going to create the <code>.manala</code> folder where all our PHP templates will be hosted:</p> <pre><code>mkdir ./.manala\n</code></pre> <p>And finally, our PHP rule template:</p> <pre><code>touch ./.manala/php-cs-rules.php\n</code></pre> <p>And paste the following content:</p> <pre><code>&lt;?php\n\n$header = &lt;&lt;&lt;'EOF'\nThis file is part of the XXX project.\n\nCopyright \u00a9 My Company\n\n@author My Company &lt;contact@my-company.com&gt;\nEOF;\n\nreturn [\n    '@Symfony' =&gt; true,\n    'psr0' =&gt; false,\n    'phpdoc_summary' =&gt; false,\n    'phpdoc_annotation_without_dot' =&gt; false,\n    'phpdoc_order' =&gt; true,\n    'array_syntax' =&gt; ['syntax' =&gt; 'short'],\n    'ordered_imports' =&gt; true,\n    'simplified_null_return' =&gt; false,\n    'header_comment' =&gt; ['header' =&gt; $header],\n    'yoda_style' =&gt; null,\n    'native_function_invocation' =&gt; ['include' =&gt; ['@compiler_optimized']],\n    'no_superfluous_phpdoc_tags' =&gt; true,\n];\n</code></pre>"},{"location":"overview/#embed-our-templates-in-a-php-project","title":"Embed our templates in a PHP project","text":""},{"location":"overview/#create-a-php-project","title":"Create a PHP project","text":"<p>For the sake of our example, we are going to create a blank PHP project, but you can of course skip this step if you already have a current PHP project that uses <code>PHP-CS-fixer</code>.</p> <pre><code>mkdir ~/my-php-project\ncd ~/my-php-project\nmkdir ./src\n# Let's create a PHP file to give some food to PHP-CS-fixer\necho \"&lt;?php\\n echo \\\"Coucou\\\";\\n\" &gt; ./src/hello.php\ncomposer init\ncomposer require friendsofphp/php-cs-fixer\ntouch ./.php_cs.dist\n</code></pre> <p>Add the following content in <code>./php_cs.dist</code>:</p> <pre><code>&lt;?php\n\n$header = &lt;&lt;&lt;'EOF'\nThis file is part of the My-wonderful-project project.\n\nCopyright \u00a9 My company\n\n@author My company &lt;contact@my-company.com&gt;\nEOF;\n\n$finder = PhpCsFixer\\Finder::create()\n    -&gt;in([\n        // App\n        __DIR__ . '/src',\n    ])\n;\n\nreturn PhpCsFixer\\Config::create()\n    -&gt;setUsingCache(true)\n    -&gt;setRiskyAllowed(true)\n    -&gt;setFinder($finder)\n    -&gt;setRules([\n        '@Symfony' =&gt; true,\n        'psr0' =&gt; false,\n        'phpdoc_summary' =&gt; false,\n        'phpdoc_annotation_without_dot' =&gt; false,\n        'phpdoc_order' =&gt; true,\n        'array_syntax' =&gt; ['syntax' =&gt; 'short'],\n        'ordered_imports' =&gt; true,\n        'simplified_null_return' =&gt; false,\n        'header_comment' =&gt; ['header' =&gt; $header],\n        'yoda_style' =&gt; null,\n        'native_function_invocation' =&gt; ['include' =&gt; ['@compiler_optimized']],\n        'no_superfluous_phpdoc_tags' =&gt; true,\n    ])\n;\n</code></pre> <p>Note</p> <p>For the moment, we have hard-coded our coding rules but in the next step, we will of course replace them with our shared rules.</p> <p>Run <code>vendor/bin/php-cs-fixer fix --dry-run</code> to check that your PHP-CS-fix config is OK.</p>"},{"location":"overview/#embed-our-php-templates-in-our-php-project","title":"Embed our PHP templates in our PHP project","text":"<p>Create a <code>.manala.yaml</code> at the root of your PHP project:</p> <p><code>touch ./.manala.yaml</code></p> <p>And add the following content:</p> <pre><code>manala:\nrepository: /path/to/your/home/my-manala-recipe-repository\ntemplate: my-php-templates\n</code></pre> <p>Warning</p> <p>Update <code>/path/to/your/home/</code> to match your real home !!! Using <code>~</code> won't work !!!</p> <p>And finally run the following command:</p> <pre><code>manala up\n# More verbose:\n# manala up --debug\n</code></pre> <p>This command should have created a <code>.manala</code> folder at the root of your project, including a <code>php-cs-rules.php</code> file.</p>"},{"location":"overview/#and-use-our-shared-php-rules","title":"And use our shared PHP rules","text":"<p>Replace the content of the <code>.php_cs.dist</code> file with the following code, in order to include the rules that are defined from now on in <code>.manala/php-cs-rules.php</code>:</p> <pre><code>&lt;?php\n\n$finder = PhpCsFixer\\Finder::create()\n    -&gt;in([\n        // App\n        __DIR__ . '/src',\n    ])\n;\n\nreturn PhpCsFixer\\Config::create()\n    -&gt;setUsingCache(true)\n    -&gt;setRiskyAllowed(true)\n    -&gt;setFinder($finder)\n    -&gt;setRules(include('.manala/php-cs-rules.php'))\n;\n</code></pre> <p>Run <code>vendor/bin/php-cs-fixer fix --dry-run</code> to test that everything is OK !</p> <p>And finally run <code>vendor/bin/php-cs-fixer fix</code> to apply the coding rules.</p> <p>That's done !</p> <p>But, hey, just wait a minute ! What about the header of my coding rules ? My shared coding rules mention a hard-coded project name (<code>This file is part of the XXX project</code>), and I want this part to be dynamic, depending on the current project !</p>"},{"location":"overview/#defining-dynamic-parts-in-your-templates","title":"Defining dynamic parts in your templates","text":"<p>In this chapter, we are going to define some dynamic parts in our templates and implement them in the projects embedding our recipe.</p> <p>For this, we must first update our template to include some dynamic parts.</p> <p>Rename the <code>php-cs-rules.php</code> to add a <code>tmpl</code> suffix:</p> <pre><code>    mv ~/my-manala-recipe-repository/my-php-templates/php-cs-rules.php ~/my-manala-recipe-repository/my-php-templates/php-cs-rules.php.tmpl\n</code></pre> <p>And update its content:</p> <pre><code>- This file is part of the XXX project.\n+ This file is part of the {{ .Vars.project_name }} project.\n</code></pre> <p>Tip</p> <p>Templates must be written according to Golang template syntax, plus some sugar functions brought by Sprig.</p> <p>Now edit the <code>.manala.yaml</code> file in your PHP project to add the following line:</p> <pre><code>project_name: My-awesome-project\n</code></pre> <p>Run the <code>manala up</code> command and look at the changes:</p> <pre><code>manala up\ncat ./.manala/php-cs-rules.php\n</code></pre> <p>Warning</p> <p>Don't forget to run <code>manala up</code> each time you edit the <code>.manala.yaml</code> file !!!</p>"},{"location":"overview/#share-your-templates-with-your-colleagues","title":"Share your templates with your colleagues","text":"<p>As previously stated, recipes are meant to be distributed. GitHub is of course the right place to host your recipes!</p> <p>So, push your recipe to GitHub and don't forget to update your manala manifest (<code>.manala.yaml</code>) in the projects that consume your recipe:</p> <pre><code>manala:\n-  repository: /path/to/your/home/my-manala-recipe-repository\n# Public repository\n+  repository: https://github.com/my-company/manala-recipes.git\n# Private repository\n+  repository: git@github.com:my-company/my-manala-recipe-repository.git\n</code></pre> <p>From now on, each time you push updates to your GitHub repository, simply run <code>manala up</code> in your projects to pass on the last updates.</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#project","title":"Project","text":"<p>A project is a directory containing a <code>.manala.yaml</code> manifest.</p>"},{"location":"usage/#manifest","title":"Manifest","text":"<p>A project manifest file is made of two parts:</p> <ul> <li>a config block (recipe, repository) handled by a fixed <code>manala</code> map key</li> <li>some custom variables values</li> </ul> <pre><code># Config\nmanala:\nrecipe: eugene                                      # Mandatory\nrepository: https://example.com/careful/eugene.git  # Optional repository url \n\n# Custom variables\nfoo: baz     # Provide custom value for \"foo\" recipe variable\n</code></pre>"},{"location":"usage/#repository","title":"Repository","text":"<p>A repository is just a directory where all first level directories are recipes.</p>"},{"location":"usage/#recipe","title":"Recipe","text":"<p>A recipe is a directory containing a <code>.manala.yaml</code> manifest. Its name is, in fact, its directory name.</p>"},{"location":"usage/#manifest_1","title":"Manifest","text":"<p>A recipe manifest file is made of two parts:</p> <ul> <li>a config block (description, project manifest template, files to sync,...) handled by a fixed <code>manala</code> map key</li> <li>some variables serving two purposes:<ul> <li>provide default values</li> <li>scaffold validation schema</li> </ul> </li> </ul> <pre><code># Config\nmanala:\ndescription: Saucerful of secrets  # Mandatory description\nicon: http://example.com/icon.png  # Optional icon url\ntemplate: .manala.yaml.tmpl        # Optional project manifest template\nsync:\n- .manala                        # \".manala\" dir will be synchronized on project\n\n# Variables\nfoo: bar     # Provide default value for \"foo\"\nbar:         # Scaffold \"bar\" validation schema as an object\nbaz: []  # Scaffold \"bar.baz\" validation schema as an array\n</code></pre>"},{"location":"usage/#validation","title":"Validation","text":"<p>As seen before, a validation schema is scaffolded from custom variables provided in recipe manifest file, using JSON Schema.</p> <pre><code>foo:\nbar: []\nbaz: 123\nqux: {}\n</code></pre> <p>generate:</p> <pre><code>{\n\"type\": \"object\",\n\"additionalProperties\": false,\n\"properties\": {\n\"foo\": {\n\"type\": \"object\",\n\"additionalProperties\": false,\n\"properties\": {\n\"bar\": {\n\"type\": \"array\"\n}\n}\n},\n\"baz\": {},\n\"qux\": {\n\"type\": \"object\",\n\"additionalProperties\": true,\n\"properties\": {}\n}\n}\n}\n</code></pre> <p>Note</p> <p><code>additionalProperties</code> default value depends on the number of the relating object properties. An empty object (zero properties) will lead to a default <code>true</code>, meaning that all properties are left to the discretion of the end user. Conversely, one or more properties will lead to a default <code>false</code>.</p> <p>Warning</p> <p>Only objects and arrays are auto scaffolded</p> <p>Custom validation schema could be provided using doc annotation </p> <pre><code>foo:\nbar: []\n# @schema {\"enum\": [null, 123, \"foo\"]}\nbaz: 123\n# @schema {\"additionalProperties\": false}\nqux: {}\n</code></pre> <pre><code>{\n\"type\": \"object\",\n\"additionalProperties\": false,\n\"properties\": {\n\"foo\": {\n\"type\": \"object\",\n\"additionalProperties\": false,\n\"properties\": {\n\"bar\": {\n\"type\": \"array\"\n}\n}\n},\n\"baz\": {\n\"enum\": [null, 123, \"foo\"]\n},\n\"qux\": {\n\"type\": \"object\",\n\"additionalProperties\": false,\n\"properties\": {}\n}\n}\n}\n</code></pre> <p>Some custom formats are also provided for the win:</p> <ul> <li><code>go-repo</code></li> <li><code>file-path</code></li> <li><code>domain</code> </li> </ul>"},{"location":"usage/#options","title":"Options","text":"<p>Recipe options could be provided using doc annotation. They will be prompted to user during a project initialization.</p> <pre><code>bar:\nbaz: []\n# @option {\"label\": \"Qux value\"}\n# @schema {\"enum\": [null, 123, \"foo\"]}\nqux: 123\n</code></pre> <p>Option fields type are guessed by schema details. For instance, an <code>enum</code> will  generate a drop-down select, and a  string <code>type</code> will generate a text input.</p> <p>In case of an <code>enum</code>, choices ares available from left to right, first one will be default.</p>"},{"location":"usage/#content","title":"Content","text":"<p>Recipes support three kind of files:</p> <p>Regular</p> <p>Regular files or directories are synchronised as is, respecting their permissions.</p> <p>Template</p> <p>Template files must ends with <code>.tmpl</code> extension.</p> <p>Functions are supplied by the built-in Go text/template package and the Sprig template function library.</p> <p>Additionally, following functions are provided: * <code>toYaml</code>: serialize variables as yaml</p> <p>Dist</p> <p>Dist files must ends with <code>.dist</code> extension.</p> <p>They are synchronized only ONCE, when the destination file does not exist in the project.</p>"},{"location":"commands/manala/","title":"manala","text":""},{"location":"commands/manala/#manala","title":"manala","text":"<p>Let your project's plumbing up to date</p>"},{"location":"commands/manala/#synopsis","title":"Synopsis","text":"<p>Manala synchronize some boring parts of your projects, such as makefile targets, virtualization and provisioning files...</p> <p>Recipes are pulled from a git repository, or a local directory.</p>"},{"location":"commands/manala/#options","title":"Options","text":"<pre><code>  -c, --cache-dir string   use cache directory\n-d, --debug              set debug mode\n-h, --help               help for manala\n</code></pre>"},{"location":"commands/manala/#see-also","title":"SEE ALSO","text":"<ul> <li>manala completion  - Generate the autocompletion script for the specified shell</li> <li>manala init  - Init project</li> <li>manala list  - List recipes</li> <li>manala update  - Synchronize project(s)</li> <li>manala watch    - Watch project</li> </ul>"},{"location":"commands/manala_completion/","title":"help","text":""},{"location":"commands/manala_completion/#manala-completion","title":"manala completion","text":"<p>Generate the autocompletion script for the specified shell</p>"},{"location":"commands/manala_completion/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for manala for the specified shell. See each sub-command's help for details on how to use the generated script.</p>"},{"location":"commands/manala_completion/#options","title":"Options","text":"<pre><code>  -h, --help   help for completion\n</code></pre>"},{"location":"commands/manala_completion/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --cache-dir string   use cache directory\n  -d, --debug              set debug mode\n</code></pre>"},{"location":"commands/manala_completion/#see-also","title":"SEE ALSO","text":"<ul> <li>manala    - Let your project's plumbing up to date</li> <li>manala completion bash    - Generate the autocompletion script for bash</li> <li>manala completion fish    - Generate the autocompletion script for fish</li> <li>manala completion powershell    - Generate the autocompletion script for powershell</li> <li>manala completion zsh  - Generate the autocompletion script for zsh</li> </ul>"},{"location":"commands/manala_completion_bash/","title":"bash","text":""},{"location":"commands/manala_completion_bash/#manala-completion-bash","title":"manala completion bash","text":"<p>Generate the autocompletion script for bash</p>"},{"location":"commands/manala_completion_bash/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for the bash shell.</p> <p>This script depends on the 'bash-completion' package. If it is not installed already, you can install it via your OS's package manager.</p> <p>To load completions in your current shell session:</p> <pre><code>source &lt;(manala completion bash)\n</code></pre> <p>To load completions for every new session, execute once:</p>"},{"location":"commands/manala_completion_bash/#linux","title":"Linux:","text":"<pre><code>manala completion bash &gt; /etc/bash_completion.d/manala\n</code></pre>"},{"location":"commands/manala_completion_bash/#macos","title":"macOS:","text":"<pre><code>manala completion bash &gt; $(brew --prefix)/etc/bash_completion.d/manala\n</code></pre> <p>You will need to start a new shell for this setup to take effect.</p> <pre><code>manala completion bash\n</code></pre>"},{"location":"commands/manala_completion_bash/#options","title":"Options","text":"<pre><code>  -h, --help              help for bash\n--no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"commands/manala_completion_bash/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --cache-dir string   use cache directory\n  -d, --debug              set debug mode\n</code></pre>"},{"location":"commands/manala_completion_bash/#see-also","title":"SEE ALSO","text":"<ul> <li>manala completion  - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"commands/manala_completion_fish/","title":"fish","text":""},{"location":"commands/manala_completion_fish/#manala-completion-fish","title":"manala completion fish","text":"<p>Generate the autocompletion script for fish</p>"},{"location":"commands/manala_completion_fish/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for the fish shell.</p> <p>To load completions in your current shell session:</p> <pre><code>manala completion fish | source\n</code></pre> <p>To load completions for every new session, execute once:</p> <pre><code>manala completion fish &gt; ~/.config/fish/completions/manala.fish\n</code></pre> <p>You will need to start a new shell for this setup to take effect.</p> <pre><code>manala completion fish [flags]\n</code></pre>"},{"location":"commands/manala_completion_fish/#options","title":"Options","text":"<pre><code>  -h, --help              help for fish\n--no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"commands/manala_completion_fish/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --cache-dir string   use cache directory\n  -d, --debug              set debug mode\n</code></pre>"},{"location":"commands/manala_completion_fish/#see-also","title":"SEE ALSO","text":"<ul> <li>manala completion  - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"commands/manala_completion_powershell/","title":"powershell","text":""},{"location":"commands/manala_completion_powershell/#manala-completion-powershell","title":"manala completion powershell","text":"<p>Generate the autocompletion script for powershell</p>"},{"location":"commands/manala_completion_powershell/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for powershell.</p> <p>To load completions in your current shell session:</p> <pre><code>manala completion powershell | Out-String | Invoke-Expression\n</code></pre> <p>To load completions for every new session, add the output of the above command to your powershell profile.</p> <pre><code>manala completion powershell [flags]\n</code></pre>"},{"location":"commands/manala_completion_powershell/#options","title":"Options","text":"<pre><code>  -h, --help              help for powershell\n--no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"commands/manala_completion_powershell/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --cache-dir string   use cache directory\n  -d, --debug              set debug mode\n</code></pre>"},{"location":"commands/manala_completion_powershell/#see-also","title":"SEE ALSO","text":"<ul> <li>manala completion  - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"commands/manala_completion_zsh/","title":"zsh","text":""},{"location":"commands/manala_completion_zsh/#manala-completion-zsh","title":"manala completion zsh","text":"<p>Generate the autocompletion script for zsh</p>"},{"location":"commands/manala_completion_zsh/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for the zsh shell.</p> <p>If shell completion is not already enabled in your environment you will need to enable it.  You can execute the following once:</p> <pre><code>echo \"autoload -U compinit; compinit\" &gt;&gt; ~/.zshrc\n</code></pre> <p>To load completions in your current shell session:</p> <pre><code>source &lt;(manala completion zsh)\n</code></pre> <p>To load completions for every new session, execute once:</p>"},{"location":"commands/manala_completion_zsh/#linux","title":"Linux:","text":"<pre><code>manala completion zsh &gt; \"${fpath[1]}/_manala\"\n</code></pre>"},{"location":"commands/manala_completion_zsh/#macos","title":"macOS:","text":"<pre><code>manala completion zsh &gt; $(brew --prefix)/share/zsh/site-functions/_manala\n</code></pre> <p>You will need to start a new shell for this setup to take effect.</p> <pre><code>manala completion zsh [flags]\n</code></pre>"},{"location":"commands/manala_completion_zsh/#options","title":"Options","text":"<pre><code>  -h, --help              help for zsh\n--no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"commands/manala_completion_zsh/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --cache-dir string   use cache directory\n  -d, --debug              set debug mode\n</code></pre>"},{"location":"commands/manala_completion_zsh/#see-also","title":"SEE ALSO","text":"<ul> <li>manala completion  - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"commands/manala_init/","title":"manala init","text":""},{"location":"commands/manala_init/#manala-init","title":"manala init","text":"<p>Init project</p>"},{"location":"commands/manala_init/#synopsis","title":"Synopsis","text":"<p>Init (manala init) will init a project.</p> <p>Example: manala init -&gt; resulting in a project init in a dir (default to the current directory)</p> <pre><code>manala init [dir] [flags]\n</code></pre>"},{"location":"commands/manala_init/#options","title":"Options","text":"<pre><code>  -h, --help                help for init\n-i, --recipe string       use recipe\n--ref string          use repository ref\n-o, --repository string   use repository\n</code></pre>"},{"location":"commands/manala_init/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --cache-dir string   use cache directory\n  -d, --debug              set debug mode\n</code></pre>"},{"location":"commands/manala_init/#see-also","title":"SEE ALSO","text":"<ul> <li>manala    - Let your project's plumbing up to date</li> </ul>"},{"location":"commands/manala_list/","title":"manala list","text":""},{"location":"commands/manala_list/#manala-list","title":"manala list","text":"<p>List recipes</p>"},{"location":"commands/manala_list/#synopsis","title":"Synopsis","text":"<p>List (manala list) will list recipes available on repository.</p> <p>Example: manala list -&gt; resulting in a recipes list display</p> <pre><code>manala list [flags]\n</code></pre>"},{"location":"commands/manala_list/#options","title":"Options","text":"<pre><code>  -h, --help                help for list\n--ref string          use repository ref\n-o, --repository string   use repository\n</code></pre>"},{"location":"commands/manala_list/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --cache-dir string   use cache directory\n  -d, --debug              set debug mode\n</code></pre>"},{"location":"commands/manala_list/#see-also","title":"SEE ALSO","text":"<ul> <li>manala    - Let your project's plumbing up to date</li> </ul>"},{"location":"commands/manala_update/","title":"manala update","text":""},{"location":"commands/manala_update/#manala-update","title":"manala update","text":"<p>Synchronize project(s)</p>"},{"location":"commands/manala_update/#synopsis","title":"Synopsis","text":"<p>Update (manala update) will synchronize project(s), based on repository's recipe and related variables defined in manifest (.manala.yaml).</p> <p>Example: manala update -&gt; resulting in an update in a project dir (default to the current directory)</p> <pre><code>manala update [dir] [flags]\n</code></pre>"},{"location":"commands/manala_update/#options","title":"Options","text":"<pre><code>  -h, --help                help for update\n-i, --recipe string       use recipe\n-r, --recursive           set recursive mode\n--ref string          use repository ref\n-o, --repository string   use repository\n</code></pre>"},{"location":"commands/manala_update/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --cache-dir string   use cache directory\n  -d, --debug              set debug mode\n</code></pre>"},{"location":"commands/manala_update/#see-also","title":"SEE ALSO","text":"<ul> <li>manala    - Let your project's plumbing up to date</li> </ul>"},{"location":"commands/manala_watch/","title":"manala watch","text":""},{"location":"commands/manala_watch/#manala-watch","title":"manala watch","text":"<p>Watch project</p>"},{"location":"commands/manala_watch/#synopsis","title":"Synopsis","text":"<p>Watch (manala watch) will watch project files, and launch update on changes.</p> <p>Example: manala watch -&gt; resulting in a watch in a project dir (default to the current directory)</p> <pre><code>manala watch [dir] [flags]\n</code></pre>"},{"location":"commands/manala_watch/#options","title":"Options","text":"<pre><code>  -a, --all                 watch recipe too\n-h, --help                help for watch\n-n, --notify              use system notifications\n-i, --recipe string       use recipe\n--ref string          use repository ref\n-o, --repository string   use repository\n</code></pre>"},{"location":"commands/manala_watch/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --cache-dir string   use cache directory\n  -d, --debug              set debug mode\n</code></pre>"},{"location":"commands/manala_watch/#see-also","title":"SEE ALSO","text":"<ul> <li>manala    - Let your project's plumbing up to date</li> </ul>"}]}